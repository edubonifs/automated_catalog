---
# This playbook deploys the Ansible Tower application (database, web and
# worker daemons) to a single server.

- hosts: tower:database:instance_group_*:isolated_group_*
  gather_facts: false
  roles:
    - role: check_config_static
      check_config_static_required_vars:
        - tower_package_name
        - tower_package_version
        - tower_package_release
    - role: config_dynamic

- name: "Group nodes by OS distribution"
  hosts: all
  gather_facts: true
  tasks:
    - name: group hosts by distribution
      group_by: 
        key: "{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
      changed_when: false

- name: "Group supported distributions"
  hosts: RedHat_7:CentOS_7:RedHat_8:CentOS_8
  gather_facts: false
  tasks:
    - name: Retrieve the point in time version (CentOS)
      command: sed 's/CentOS Linux release \(.*\)\..*/\1/' /etc/redhat-release
      args:
        warn: False
      register: centos_version
      when: ansible_distribution == "CentOS"

    - name: Set the proper ansible_distribution_version fact (CentOS)
      set_fact:
        ansible_distribution_version: '{{ centos_version.stdout }}'
      when: ansible_distribution == "CentOS"

    - name: group hosts for supported distributions
      group_by: key="supported"
      changed_when: false
      when: ansible_distribution_version is version_compare ('7.7', '>=')

- name: "Group deprecated distributions"
  hosts: none
  gather_facts: false
  tasks:
    - name: group hosts for supported distributions
      group_by: key="deprecated"
      changed_when: false

- name: "Ensure all node OS distributions are supported"
  hosts: "!supported"
  gather_facts: false
  tasks:
    - name: fail for unsupported distribution
      fail: msg="{{ ansible_distribution }} {{ ansible_distribution_version }}
                 is not a supported OS for a Tower installation.  Supported
                 OSes include Red Hat Enterprise Linux 7.7+ and CentOS 7.7+."

- name: "Check for deprecated platforms"
  hosts: deprecated
  gather_facts: false
  tasks:
    - name: warn for deprecated distribution
      fail: msg="{{ ansible_distribution }} {{ ansible_distribution_version }}
                 is a deprecated OS for a Tower installation, and support will
                 be removed in a future release."
      ignore_errors: true

    - name: pause for warning
      pause: seconds=5

- name: "Define role discovered variables, usable throughout the playbook"
  hosts: tower:database:instance_group_*
  any_errors_fatal: true
  gather_facts: false
  roles:
    - role: postgres
      postgres_exec_vars_only: true

- name: "Sanity check and prep Tower node(s)"
  hosts: tower:instance_group_*
  any_errors_fatal: true
  gather_facts: false
  roles:
    - role: preflight
      tags: preflight

    - role: migrations
      tags: migrations
      migrations_database: "{{ config_dynamic_database }}"
      migrations_pg_database: "{{ pg_database }}"
      migrations_tower_version: "{{ tower_version }}"

- name: "Install custom CA certificate, if provided"
  hosts: tower:instance_group_*:database
  any_errors_fatal: true
  gather_facts: false
  roles:
    - role: ca_cert
      tags: install_custom_ca_cert
      when: custom_ca_cert is defined

- name: "Prep installation repos"
  hosts: tower:instance_group_*:database:isolated_group_*
  any_errors_fatal: true
  gather_facts: false
  roles:
    - role: repos_el
      tags: packages

- name: "Install postgres database node"
  hosts: database
  any_errors_fatal: true
  gather_facts: false
  pre_tasks:
    - include_role:
        name: packages_el
      vars:
        packages_el_install_tower: false
        packages_el_install_postgres: true
      tags: packages

  roles:
    - role: postgres
      tags: postgresql_database
      postgres_allowed_ipv4: "0.0.0.0/0"
      postgres_allowed_ipv6: "::/0"
      postgres_username: "{{ pg_username }}"
      postgres_password: "{{ pg_password }}"
      postgres_database: "{{ pg_database }}"
      max_postgres_connections: 1024
      postgres_shared_memory_size: "{{ (ansible_memtotal_mb*0.3)|int }}"
      postgres_work_mem: "{{ (ansible_memtotal_mb*0.03)|int }}"
      postgres_maintenance_work_mem: "{{ (ansible_memtotal_mb*0.04)|int }}"

    - role: firewall
      tags: firewall
      firewalld_http_port: "{{ nginx_http_port }}"
      firewalld_https_port: "{{ nginx_https_port }}"

- name: "Install Tower node(s)"
  hosts: tower:instance_group_*
  any_errors_fatal: true
  gather_facts: false
  pre_tasks:
    - set_fact: cluster_host="{{ routable_hostname|default(ansible_host) }}"

    - include_role:
        name: packages_el
      vars:
        packages_el_tower_package_name: "{{ tower_package_name }}"
        packages_el_tower_package_version: "{{ tower_package_version }}"
      tags: packages

  roles:
    - role: redis
      tag: redis

    - role: postgres
      tags: postgresql_primary
      postgres_username: "{{ pg_username }}"
      postgres_password: "{{ pg_password }}"
      postgres_database: "{{ pg_database }}"
      max_postgres_connections: 200
      postgres_shared_memory_size: "{{ (ansible_memtotal_mb*0.1)|int }}"
      postgres_work_mem: "{{ (ansible_memtotal_mb*0.01)|int }}"
      postgres_maintenance_work_mem: "{{ (ansible_memtotal_mb*0.04)|int }}"
      when: "config_dynamic_database == 'internal'"

    - role: firewall
      tags: firewall
      firewalld_http_port: "{{ nginx_http_port }}"
      firewalld_https_port: "{{ nginx_https_port }}"

    - role: memcached
      tags: memcached

    - role: rsyslog
      tags: rsyslog

    - role: awx_install
      tags: awx
      awx_install_admin_password: "{{ admin_password }}"
      awx_install_database: "{{ config_dynamic_database }}"
      awx_install_pg_host: "{{ pg_host }}"
      awx_install_pg_port: "{{ pg_port }}"
      awx_install_pg_username: "{{ pg_username }}"
      awx_install_pg_password: "{{ pg_password }}"
      awx_install_pg_database: "{{ pg_database }}"
      awx_install_pg_init_name: "{{ postgres_init_name }}"
      awx_install_redis_init_name: "{{ redis_init_name }}"
      awx_install_cluster_host: "{{ cluster_host }}"

    - role: supervisor
      tags: supervisor
      local_queue: "{{ cluster_host }}"

    - role: nginx
      tags: nginx

    - role: misc
      tags: misc
      cluster_host_identifier: "{{ cluster_host }}"

  post_tasks:
    - name: Start the ansible-tower service
      service:
        name: ansible-tower
        state: started

- name: "Install Tower isolated node(s)"
  hosts: isolated_group_*
  any_errors_fatal: true
  become: yes
  gather_facts: false
  pre_tasks:
    - set_fact: cluster_host="{{ routable_hostname|default(ansible_host) }}"
  roles:
    - role: isolated
      isolated_package_version: "{{ tower_package_version }}"
      cluster_host_identifier: "{{ cluster_host }}"
