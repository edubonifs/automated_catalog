---
- block:
  - name: 'include packages_el variables'
    include_vars: '{{ item }}'
    with_first_found:
      - files:
          - '{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml'        # RedHat-7
          - '{{ ansible_os_family }}.yml'                                                 # RedHat
        paths: '../vars'

  - name: Dump the new Tower instance topology
    shell: |
      {{ scl_command }} pg_dump \
        --clean --create \
        --host='{{ tower_db_settings.default.HOST }}' \
        --port={{ tower_db_settings.default.PORT }} \
        --username='{{ tower_db_settings.default.USER }}' \
        --dbname='{{ tower_db_settings.default.NAME }}' \
        --table=main_instance \
        --table=main_instancegroup \
        --table=main_instancegroup_instances > new_instance_topology.db
    args:
      chdir: '{{ backup_dir.rstrip("/") }}/restore/'
    environment: "{{ {'PGPASSWORD': tower_db_settings.default.PASSWORD} | combine( extra_env | default({}) ) }}"
    no_log: True

  # use dbname 'template1' to connect to the remote database
  # Since we drop the database as part of our backup/restore, we can't use the awx
  # database for this command.
  - name: Perform a PostgreSQL restore (external).
    shell: |
      {{ scl_command }} psql \
        --host='{{ tower_db_settings.default.HOST }}' \
        --port={{ tower_db_settings.default.PORT }} \
        --username='{{ tower_db_settings.default.USER  }}' \
        --dbname='template1' < ./tower.db &&
      {{ scl_command }} psql \
        --host='{{ tower_db_settings.default.HOST }}' \
        --port={{ tower_db_settings.default.PORT }} \
        --username='{{ tower_db_settings.default.USER  }}' \
        --dbname='{{ tower_db_settings.default.NAME }}' < ./new_instance_topology.db
    args:
      chdir: '{{ backup_dir.rstrip("/") }}/restore/'
    environment: "{{ {'PGPASSWORD': tower_db_settings.default.PASSWORD} | combine( extra_env | default({}) ) }}"
    no_log: True
    when: restore_database == 'external'

  - name: Modify database dump permissions (internal).
    file:
      mode: 0660
      owner: root
      group: postgres
      path: '{{ backup_dir.rstrip("/") }}/restore/{{ item }}'
    loop:
      - tower.db
      - new_instance_topology.db
    when: restore_database == 'internal'

  - name: Perform a PostgreSQL restore (internal).
    shell: |
      {{ scl_command }} psql \
        --dbname='template1' < tower.db &&
      {{ scl_command }} psql \
        --dbname='{{ tower_db_settings.default.NAME }}' < new_instance_topology.db
    args:
      chdir: '{{ backup_dir.rstrip("/") }}/restore/'
    become_user: postgres
    no_log: True
    become: True
    environment: '{{ extra_env | default(omit) }}'
    when: restore_database == 'internal'

  - name: Modify database dump permissions (internal).
    file:
      mode: 0600
      owner: root
      group: root
      path: '{{ backup_dir.rstrip("/") }}/restore/{{ item }}'
    loop:
      - tower.db
      - new_instance_topology.db
    when: restore_database == 'internal'

  - name: Copy temporary sql file
    copy:
      src: rebuild_ig_mapping.sql
      dest: '{{ backup_dir.rstrip("/") }}/restore/'
      owner: root
      mode: 0644

  - name: Rebuild instance group assignments (external)
    shell: |
      {{ scl_command }} psql \
        --host='{{ tower_db_settings.default.HOST }}' \
        --port={{ tower_db_settings.default.PORT }} \
        --username='{{ tower_db_settings.default.USER  }}' \
        --dbname='{{ tower_db_settings.default.NAME }}' < ./rebuild_ig_mapping.sql
    args:
      chdir: '{{ backup_dir.rstrip("/") }}/restore/'
    environment: "{{ {'PGPASSWORD': tower_db_settings.default.PASSWORD} | combine( extra_env | default({}) ) }}"
    no_log: True
    when: restore_database == 'external'

  - name: Rebuild instance group assignments (internal)
    shell: |
      {{ scl_command }} psql \
        --dbname='{{ tower_db_settings.default.NAME }}' < rebuild_ig_mapping.sql
    args:
      chdir: '{{ backup_dir.rstrip("/") }}/restore/'
    become_user: postgres
    no_log: True
    become: True
    environment: '{{ extra_env | default(omit) }}'
    when: restore_database == 'internal'

  - name: Remove temporary sql file
    file:
      path: '{{ backup_dir.rstrip("/") }}/restore/rebuild_ig_mapping.sql'
      state: absent
  when: inventory_hostname == groups['tower'][0]
